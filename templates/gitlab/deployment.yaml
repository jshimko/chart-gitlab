apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        name: {{ template "fullname" . }}
    spec:
      containers:
      - name: gitlab
        image: {{ .Values.gitlab.image }}
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash", "-c",
          "sed -i \"s/environment ({'GITLAB_ROOT_PASSWORD' => initial_root_password }) if initial_root_password/environment ({'GITLAB_ROOT_PASSWORD' => initial_root_password, 'GITLAB_SHARED_RUNNERS_REGISTRATION_TOKEN' => node['gitlab']['gitlab-rails']['initial_shared_runners_registration_token'] })/g\" /opt/gitlab/embedded/cookbooks/gitlab/recipes/database_migrations.rb && exec /assets/wrapper"]
        env:
        - name: GITLAB_EXTERNAL_SCHEME
          valueFrom:
            configMapKeyRef:
              name: {{ template "fullname" . }}-config
              key: external_scheme
        - name: GITLAB_EXTERNAL_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: {{ template "fullname" . }}-config
              key: external_hostname
        - name: GITLAB_REGISTRY_EXTERNAL_SCHEME
          valueFrom:
            configMapKeyRef:
              name: {{ template "fullname" . }}-config
              key: registry_external_scheme
        - name: GITLAB_REGISTRY_EXTERNAL_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: {{ template "fullname" . }}-config
              key: registry_external_hostname
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: {{ template "fullname" . }}-config
              key: postgres_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}-secrets
              key: postgres_password
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: {{ template "fullname" . }}-config
              key: postgres_db
        - name: GITLAB_INITIAL_SHARED_RUNNERS_REGISTRATION_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}-secrets
              key: initial_shared_runners_registration_token
        {{- if .Values.gitlabEELicense }}
        - name: GITLAB_EE_LICENSE
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}-secrets
              key: gitlab_ee_license
        {{- end }}
        {{- if and .Values.pagesExternalScheme .Values.pagesExternalDomain }}
        - name: PAGES_EXTERNAL_SCHEME
          valueFrom:
            configMapKeyRef:
              name: {{ template "fullname" . }}-config
              key: pages_external_scheme
        - name: PAGES_EXTERNAL_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: {{ template "fullname" . }}-config
              key: pages_external_domain
        {{- end }}
        - name: GITLAB_OMNIBUS_CONFIG
          value: |
            external_url "#{ENV['GITLAB_EXTERNAL_SCHEME']}://#{ENV['GITLAB_EXTERNAL_HOSTNAME']}"
            registry_external_url "#{ENV['GITLAB_REGISTRY_EXTERNAL_SCHEME']}://#{ENV['GITLAB_REGISTRY_EXTERNAL_HOSTNAME']}"

            gitlab_rails['initial_shared_runners_registration_token'] = ENV['GITLAB_INITIAL_SHARED_RUNNERS_REGISTRATION_TOKEN']

            nginx['enable'] = false
            mattermost_nginx['enable'] = false

            gitlab_workhorse['listen_network'] = 'tcp'
            gitlab_workhorse['listen_addr'] = '0.0.0.0:8005'

            registry_nginx['enable'] = false
            registry['registry_http_addr'] = '0.0.0.0:8105'
            {{- if eq .Values.registry.storage.driver "s3" }}
            registry['storage'] = { 's3' => { 'accesskey' => '{{ .Values.registry.storage.s3.accessKey }}', 'secretkey' => '{{ .Values.registry.storage.s3.secretKey }}', 'bucket' => '{{ .Values.registry.storage.s3.bucket }}', 'region' => '{{ .Values.registry.storage.s3.region }}' } }
            {{- end }}

            postgresql['enable'] = false
            gitlab_rails['db_host'] = '{{ template "postgresql.fullname" . }}'
            gitlab_rails['db_password'] = ENV['POSTGRES_PASSWORD']
            gitlab_rails['db_username'] = ENV['POSTGRES_USER']
            gitlab_rails['db_database'] = ENV['POSTGRES_DB']

            redis['enable'] = false
            gitlab_rails['redis_host'] = '{{ template "redis.fullname" . }}'

            {{- if .Values.email.username }}
            gitlab_rails['smtp_user_name'] = "{{ .Values.email.username }}"
            {{- end }}
            {{- if .Values.email.password }}
            gitlab_rails['smtp_password'] = "{{ .Values.email.password }}"
            {{- end }}
            {{- if .Values.email.domain }}
            gitlab_rails['smtp_domain'] = "{{ .Values.email.domain }}"
            {{- end }}
            {{- if .Values.email.from }}
            gitlab_rails['gitlab_email_from'] = "{{ .Values.email.from }}"
            {{- end }}
            {{- if .Values.email.replyTo }}
            gitlab_rails['gitlab_email_reply_to'] = "{{ .Values.email.replyTo }}"
            {{- end }}
            {{- if .Values.email.enabled }}
            gitlab_rails['smtp_enable'] = true
            {{- end }}
            {{- if .Values.email.address }}
            gitlab_rails['smtp_address'] = "{{ .Values.email.address }}"
            {{- end }}
            {{- if .Values.email.port }}
            gitlab_rails['smtp_port'] = {{ .Values.email.port }}
            {{- end }}
            {{- if .Values.email.authentication }}
            gitlab_rails['smtp_authentication'] = "{{ .Values.email.authentication }}"
            {{- end }}
            {{- if .Values.email.enableStartTLSAuto }}
            gitlab_rails['smtp_enable_starttls_auto'] = true
            {{- else }}
            gitlab_rails['smtp_enable_starttls_auto'] = false
            {{- end }}

            manage_accounts['enable'] = true
            manage_storage_directories['manage_etc'] = false

            if ENV['PAGES_EXTERNAL_SCHEME'] && ENV['PAGES_EXTERNAL_DOMAIN']
              pages_external_url "#{ENV['PAGES_EXTERNAL_SCHEME']}://#{ENV['PAGES_EXTERNAL_DOMAIN']}/"
              gitlab_pages['enable'] = true
              gitlab_pages['listen_proxy'] = "0.0.0.0:8090"
            end

            gitlab_shell['auth_file'] = '/gitlab-data/ssh/authorized_keys'
            git_data_dirs({ "default" => { "path" => "/gitlab-data/git-data" } })
            gitlab_rails['shared_path'] = '/gitlab-data/shared'
            gitlab_rails['uploads_directory'] = '/gitlab-data/uploads'
            gitlab_ci['builds_directory'] = '/gitlab-data/builds'
            gitlab_rails['registry_path'] = '/gitlab-registry'
            gitlab_rails['trusted_proxies'] = ["10.0.0.0/8","172.16.0.0/12","192.168.0.0/16"]

            prometheus['listen_address'] = '0.0.0.0:9090'
            postgres_exporter['enable'] = true
            postgres_exporter['env'] = {
              'DATA_SOURCE_NAME' => "user=#{ENV['POSTGRES_USER']} host={{ template "postgresql.fullname" . }} port=5432 dbname=#{ENV['POSTGRES_DB']} password=#{ENV['POSTGRES_PASSWORD']} sslmode=disable"
            }
            redis_exporter['enable'] = true
            redis_exporter['flags'] = {
              'redis.addr' => "{{ template "redis.fullname" . }}:6379",
            }
        - name: GITLAB_POST_RECONFIGURE_CODE
          value: |
            include Gitlab::CurrentSettings

            PrometheusService.where(template: true).first_or_create(
              active: true, api_url: "http://localhost:9090")

            KubernetesService.where(template: true).first_or_create(
              active: true,
              api_url: "https://#{ENV["KUBERNETES_SERVICE_HOST"]}:#{ENV["KUBERNETES_SERVICE_PORT"]}",
              token: File.read("/var/run/secrets/kubernetes.io/serviceaccount/token"),
              ca_pem: File.read("/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"))

            current_application_settings.update_attribute(:health_check_access_token, '{{.Values.healthCheckToken}}')

            {{- if .Values.gitlabEELicense }}
            License.first_or_create(data: "#{ENV["GITLAB_EE_LICENSE"]}")
            {{- end }}
        - name: GITLAB_POST_RECONFIGURE_SCRIPT
          value: |
            /opt/gitlab/bin/gitlab-rails runner -e production "$GITLAB_POST_RECONFIGURE_CODE"
        ports:
        - name: registry
          containerPort: 8105
        - name: mattermost
          containerPort: 8065
        - name: workhorse
          containerPort: 8005
        - name: ssh
          containerPort: 22
        - name: prometheus
          containerPort: 9090
        {{- if and .Values.pagesExternalScheme .Values.pagesExternalDomain }}
        - name: pages
          containerPort: 8090
        {{- end }}
        volumeMounts:
        - name: config
          mountPath: /etc/gitlab
        - name: data
          mountPath: /gitlab-data
          subPath: gitlab-data
        {{- if .Values.registry.storage.internal }}
        - name: registry
          mountPath: /gitlab-registry
        {{- end }}
        livenessProbe:
          httpGet:
            path: /health_check?token={{.Values.healthCheckToken}}
            port: 8005
          initialDelaySeconds: 180
          timeoutSeconds: 15
        readinessProbe:
          httpGet:
            path: /health_check?token={{.Values.healthCheckToken}}
            port: 8005
          initialDelaySeconds: 15
          timeoutSeconds: 1
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ template "fullname" . }}-storage
      - name: config
        persistentVolumeClaim:
          claimName: {{ template "fullname" . }}-config-storage
      {{- if .Values.registry.storage.internal }}
      - name: registry
        persistentVolumeClaim:
          claimName: {{ template "fullname" . }}-registry-storage
      {{- end }}
